{
  "openapi": "3.0.3",
  "info": {
    "title": "Ollama API",
    "description": "API for interacting with Ollama language models",
    "version": "0.5.1",
    "contact": {
      "name": "Ollama",
      "url": "https://ollama.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/ollama/ollama/blob/main/LICENSE"
    }
  },
  "servers": [
    {
      "url": "http://localhost:11434",
      "description": "Local Ollama server"
    }
  ],
  "paths": {
    "/api/generate": {
      "post": {
        "summary": "Generate a completion",
        "description": "Generate a response for a given prompt with a provided model. This is a streaming endpoint.",
        "operationId": "generateCompletion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "summary": "Generate a chat completion",
        "description": "Generate the next message in a chat with a provided model. This is a streaming endpoint.",
        "operationId": "generateChatCompletion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/create": {
      "post": {
        "summary": "Create a model",
        "description": "Create a model from another model, a safetensors directory, or a GGUF file.",
        "operationId": "createModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags": {
      "get": {
        "summary": "List local models",
        "description": "List models that are available locally.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/show": {
      "post": {
        "summary": "Show model information",
        "description": "Show information about a model including details, modelfile, template, parameters, license, system prompt.",
        "operationId": "showModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShowModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShowModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/copy": {
      "post": {
        "summary": "Copy a model",
        "description": "Copy a model. Creates a model with another name from an existing model.",
        "operationId": "copyModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model copied successfully"
          },
          "404": {
            "description": "Source model not found"
          }
        }
      }
    },
    "/api/delete": {
      "delete": {
        "summary": "Delete a model",
        "description": "Delete a model and its data.",
        "operationId": "deleteModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model deleted successfully"
          },
          "404": {
            "description": "Model not found"
          }
        }
      }
    },
    "/api/pull": {
      "post": {
        "summary": "Pull a model",
        "description": "Download a model from the ollama library.",
        "operationId": "pullModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/push": {
      "post": {
        "summary": "Push a model",
        "description": "Upload a model to a model library.",
        "operationId": "pushModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushModelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/embed": {
      "post": {
        "summary": "Generate embeddings",
        "description": "Generate embeddings from a model",
        "operationId": "generateEmbeddings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ps": {
      "get": {
        "summary": "List running models",
        "description": "List models that are currently loaded into memory.",
        "operationId": "listRunningModels",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRunningModelsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/embeddings": {
      "post": {
        "summary": "Generate embedding (deprecated)",
        "description": "Generate embeddings from a model. This endpoint has been superseded by /api/embed",
        "deprecated": true,
        "operationId": "generateEmbedding",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "summary": "Get version",
        "description": "Retrieve the Ollama version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/blobs/{digest}": {
      "head": {
        "summary": "Check if blob exists",
        "description": "Check if a blob exists on the server",
        "operationId": "checkBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SHA256 digest of the blob"
          }
        ],
        "responses": {
          "200": {
            "description": "Blob exists"
          },
          "404": {
            "description": "Blob not found"
          }
        }
      },
      "post": {
        "summary": "Push a blob",
        "description": "Push a file to the Ollama server to create a blob",
        "operationId": "pushBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Expected SHA256 digest of the file"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blob created successfully"
          },
          "400": {
            "description": "Bad request - digest mismatch"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenerateRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model name"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt to generate a response for"
          },
          "suffix": {
            "type": "string",
            "description": "The text after the model response"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of base64-encoded images (for multimodal models)"
          },
          "think": {
            "type": "boolean",
            "description": "Should the model think before responding? (for thinking models)"
          },
          "format": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["json"]
              },
              {
                "type": "object",
                "description": "JSON schema for structured outputs"
              }
            ],
            "description": "The format to return a response in"
          },
          "options": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "system": {
            "type": "string",
            "description": "System message to override what is defined in the Modelfile"
          },
          "template": {
            "type": "string",
            "description": "The prompt template to use"
          },
          "stream": {
            "type": "boolean",
            "default": true,
            "description": "If false, response will be returned as a single response object"
          },
          "raw": {
            "type": "boolean",
            "description": "If true, no formatting will be applied to the prompt"
          },
          "keep_alive": {
            "type": "string",
            "description": "Controls how long the model will stay loaded into memory"
          },
          "context": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The context parameter returned from a previous request (deprecated)"
          }
        }
      },
      "GenerateResponse": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "response": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          },
          "done_reason": {
            "type": "string"
          },
          "context": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "total_duration": {
            "type": "integer",
            "format": "int64"
          },
          "load_duration": {
            "type": "integer",
            "format": "int64"
          },
          "prompt_eval_count": {
            "type": "integer"
          },
          "prompt_eval_duration": {
            "type": "integer",
            "format": "int64"
          },
          "eval_count": {
            "type": "integer"
          },
          "eval_duration": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ChatRequest": {
        "type": "object",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model name"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "The messages of the chat"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "List of tools for the model to use if supported"
          },
          "think": {
            "type": "boolean",
            "description": "Should the model think before responding? (for thinking models)"
          },
          "format": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["json"]
              },
              {
                "type": "object",
                "description": "JSON schema for structured outputs"
              }
            ],
            "description": "The format to return a response in"
          },
          "options": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "stream": {
            "type": "boolean",
            "default": true,
            "description": "If false, response will be returned as a single response object"
          },
          "keep_alive": {
            "type": "string",
            "description": "Controls how long the model will stay loaded into memory"
          }
        }
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          },
          "done": {
            "type": "boolean"
          },
          "done_reason": {
            "type": "string"
          },
          "total_duration": {
            "type": "integer",
            "format": "int64"
          },
          "load_duration": {
            "type": "integer",
            "format": "int64"
          },
          "prompt_eval_count": {
            "type": "integer"
          },
          "prompt_eval_duration": {
            "type": "integer",
            "format": "int64"
          },
          "eval_count": {
            "type": "integer"
          },
          "eval_duration": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant", "tool"],
            "description": "The role of the message"
          },
          "content": {
            "type": "string",
            "description": "The content of the message"
          },
          "thinking": {
            "type": "string",
            "description": "The model's thinking process (for thinking models)"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of images to include in the message (for multimodal models)"
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "description": "A list of tools that the model wants to use"
          },
          "tool_name": {
            "type": "string",
            "description": "The name of the tool that was executed"
          }
        }
      },
      "Tool": {
        "type": "object",
        "required": ["type", "function"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          }
        }
      },
      "Function": {
        "type": "object",
        "required": ["name", "description", "parameters"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function"
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does"
          },
          "parameters": {
            "type": "object",
            "description": "The parameters the function accepts, described as a JSON Schema object"
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "arguments": {
                "type": "object"
              }
            }
          }
        }
      },
      "ModelOptions": {
        "type": "object",
        "properties": {
          "num_keep": {
            "type": "integer",
            "description": "Number of tokens to keep from the prompt"
          },
          "seed": {
            "type": "integer",
            "description": "Random seed for reproducible outputs"
          },
          "num_predict": {
            "type": "integer",
            "description": "Maximum number of tokens to predict"
          },
          "top_k": {
            "type": "integer",
            "description": "Reduces the probability of generating nonsense"
          },
          "top_p": {
            "type": "number",
            "description": "Works together with top-k"
          },
          "min_p": {
            "type": "number",
            "description": "Alternative to the top_p"
          },
          "typical_p": {
            "type": "number",
            "description": "Locally typical sampling"
          },
          "repeat_last_n": {
            "type": "integer",
            "description": "Sets how far back for the model to look back to prevent repetition"
          },
          "temperature": {
            "type": "number",
            "description": "The temperature of the model"
          },
          "repeat_penalty": {
            "type": "number",
            "description": "Sets how strongly to penalize repetitions"
          },
          "presence_penalty": {
            "type": "number",
            "description": "Positive values penalize new tokens based on whether they appear in the text so far"
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Positive values penalize new tokens based on their existing frequency in the text so far"
          },
          "penalize_newline": {
            "type": "boolean",
            "description": "Whether to penalize newlines"
          },
          "stop": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Stop sequences"
          },
          "numa": {
            "type": "boolean",
            "description": "Whether to use NUMA"
          },
          "num_ctx": {
            "type": "integer",
            "description": "Sets the size of the context window"
          },
          "num_batch": {
            "type": "integer",
            "description": "Sets the batch size for prompt processing"
          },
          "num_gpu": {
            "type": "integer",
            "description": "The number of GPUs to use"
          },
          "main_gpu": {
            "type": "integer",
            "description": "The GPU to use for the main computation"
          },
          "use_mmap": {
            "type": "boolean",
            "description": "Whether to use memory mapping"
          },
          "num_thread": {
            "type": "integer",
            "description": "Sets the number of threads to use during computation"
          }
        }
      },
      "CreateModelRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of the model to create"
          },
          "from": {
            "type": "string",
            "description": "Name of an existing model to create the new model from"
          },
          "files": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A dictionary of file names to SHA256 digests of blobs"
          },
          "adapters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A dictionary of file names to SHA256 digests of blobs for LORA adapters"
          },
          "template": {
            "type": "string",
            "description": "The prompt template for the model"
          },
          "license": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "A string or list of strings containing the license or licenses for the model"
          },
          "system": {
            "type": "string",
            "description": "A string containing the system prompt for the model"
          },
          "parameters": {
            "type": "object",
            "description": "A dictionary of parameters for the model"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "A list of message objects used to create a conversation"
          },
          "stream": {
            "type": "boolean",
            "description": "If false, response will be returned as a single response object"
          },
          "quantize": {
            "type": "string",
            "enum": ["q4_K_M", "q4_K_S", "q8_0"],
            "description": "Quantize a non-quantized model"
          }
        }
      },
      "CreateModelResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "completed": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ListModelsResponse": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "Model": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "digest": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          }
        }
      },
      "ModelDetails": {
        "type": "object",
        "properties": {
          "parent_model": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "family": {
            "type": "string"
          },
          "families": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameter_size": {
            "type": "string"
          },
          "quantization_level": {
            "type": "string"
          }
        }
      },
      "ShowModelRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of the model to show"
          },
          "verbose": {
            "type": "boolean",
            "description": "If set to true, returns full data for verbose response fields"
          }
        }
      },
      "ShowModelResponse": {
        "type": "object",
        "properties": {
          "modelfile": {
            "type": "string"
          },
          "parameters": {
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          },
          "model_info": {
            "type": "object",
            "additionalProperties": true
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CopyModelRequest": {
        "type": "object",
        "required": ["source", "destination"],
        "properties": {
          "source": {
            "type": "string",
            "description": "Name of the source model"
          },
          "destination": {
            "type": "string",
            "description": "Name of the destination model"
          }
        }
      },
      "DeleteModelRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Model name to delete"
          }
        }
      },
      "PullModelRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of the model to pull"
          },
          "insecure": {
            "type": "boolean",
            "description": "Allow insecure connections to the library"
          },
          "stream": {
            "type": "boolean",
            "description": "If false, response will be returned as a single response object"
          }
        }
      },
      "PullModelResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "completed": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PushModelRequest": {
        "type": "object",
        "required": ["model"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of the model to push in the form of <namespace>/<model>:<tag>"
          },
          "insecure": {
            "type": "boolean",
            "description": "Allow insecure connections to the library"
          },
          "stream": {
            "type": "boolean",
            "description": "If false, response will be returned as a single response object"
          }
        }
      },
      "PushModelResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EmbedRequest": {
        "type": "object",
        "required": ["model", "input"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of model to generate embeddings from"
          },
          "input": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Text or list of text to generate embeddings for"
          },
          "truncate": {
            "type": "boolean",
            "default": true,
            "description": "Truncates the end of each input to fit within context length"
          },
          "options": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "keep_alive": {
            "type": "string",
            "description": "Controls how long the model will stay loaded into memory"
          }
        }
      },
      "EmbedResponse": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "embeddings": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "total_duration": {
            "type": "integer",
            "format": "int64"
          },
          "load_duration": {
            "type": "integer",
            "format": "int64"
          },
          "prompt_eval_count": {
            "type": "integer"
          }
        }
      },
      "ListRunningModelsResponse": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunningModel"
            }
          }
        }
      },
      "RunningModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "digest": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/ModelDetails"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "size_vram": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EmbeddingRequest": {
        "type": "object",
        "required": ["model", "prompt"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of model to generate embeddings from"
          },
          "prompt": {
            "type": "string",
            "description": "Text to generate embeddings for"
          },
          "options": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "keep_alive": {
            "type": "string",
            "description": "Controls how long the model will stay loaded into memory"
          }
        }
      },
      "EmbeddingResponse": {
        "type": "object",
        "properties": {
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "VersionResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        }
      }
    }
  }
}